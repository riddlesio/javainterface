/*
 * Copyright 2016 riddles.io (developers@riddles.io)
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 *     For the full copyright and license information, please view the LICENSE
 *     file that was distributed with this source code.
 */

package io.riddles.javainterface.game;

import org.json.JSONArray;
import org.json.JSONObject;

import io.riddles.javainterface.game.player.AbstractPlayer;
import io.riddles.javainterface.game.processor.AbstractProcessor;
import io.riddles.javainterface.game.state.AbstractState;
import io.riddles.javainterface.serialize.AbstractSerializer;

/**
 * io.riddles.javainterface.game.state.AbstractGameSerializer - Created on 8-6-16
 *
 * DO NOT EDIT THIS FILE
 *
 * Used to transform the played game to a string that can be stored
 * and used in the game visualizer to show the played game
 *
 * @author Jim van Eeden - jim@riddles.io
 */
public abstract class AbstractGameSerializer<P extends AbstractProcessor, S extends AbstractState, R extends AbstractSerializer> {

    /**
     * Should return the complete game in a json string
     * @param processor Processor that is used this game
     * @param initialState Initial state of the game
     * @return Complete game as a json string
     */
    public String traverseToString(P processor, S initialState, R stateSerializer) {
        return visitGame(processor, initialState, stateSerializer).toString();
    }

    /**
     * Method that can be used for (almost) every game type. Will put everything
     * to the output file that every visualizer needs. Override method if needed
     * @param processor Processor that is used this game
     * @param initialState Initial game state
     * @param stateSerializer Serializer for the game states
     * @return Game JSON object
     */
    protected JSONObject visitGame(P processor, S initialState, R stateSerializer) {
        JSONObject game = new JSONObject();

        JSONArray states = new JSONArray();
        S state = initialState;
        states.put(stateSerializer.traverseToJson(state));
        while (state.hasNextState()) {
            state = (S) state.getNextState();
            states.put(stateSerializer.traverseToJson(state));
        }

        game.put("settings", visitSettings(processor));
        game.put("score", processor.getScore(state));
        game.put("winner", visitWinner(processor, state));
        game.put("states", states);

        return game;
    }

    /**
     * Gets the default settings, used for most games. Override if needed
     * @param processor Game processor
     * @return Settings JSON Object
     */
    protected JSONObject visitSettings(P processor) {
        JSONArray playerNames = new JSONArray();
        for (Object obj : processor.getPlayerProvider().getPlayers()) {
            AbstractPlayer player = (AbstractPlayer) obj;
            playerNames.put(player.getName());
        }

        JSONObject players = new JSONObject();
        players.put("count", processor.getPlayerProvider().getPlayers().size());
        players.put("names", playerNames);

        JSONObject settings = new JSONObject();
        settings.put("players", players);

        return settings;
    }

    /**
     * Gets the game winner
     * @param processor Game processor
     * @param finalState Final state in the game
     * @return Winner ID or a NULL JSON object
     */
    protected Object visitWinner(P processor, S finalState) {
        if (processor.getWinnerId(finalState) != null) {
            return processor.getWinnerId(finalState);
        }

        return JSONObject.NULL;
    }
}
