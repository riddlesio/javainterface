/*
 * Copyright 2016 riddles.io (developers@riddles.io)
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 *     For the full copyright and license information, please view the LICENSE
 *     file that was distributed with this source code.
 */

package io.riddles.javainterface.game.processor;

import io.riddles.javainterface.game.move.AbstractMove;
import io.riddles.javainterface.game.move.AbstractMoveDeserializer;
import io.riddles.javainterface.game.player.AbstractPlayer;
import io.riddles.javainterface.game.player.PlayerProvider;
import io.riddles.javainterface.game.state.AbstractState;

/**
 * io.riddles.javainterface.game.processor.AbstractProcessor - Created on 6-6-16
 *
 * DO NOT EDIT THIS FILE
 *
 * The processor handles the main game logic. This class should be subclassed and
 * the subclass should implement these methods. Implement anything else here needed
 * to process the game states.
 *
 * This abstract class only stores the players on it's own.
 *
 * @author Jim van Eeden - jim@riddles.io
 */
public abstract class AbstractProcessor<S extends AbstractState, P extends AbstractPlayer, M extends AbstractMove> {

    protected PlayerProvider<P> playerProvider;
    protected AbstractMoveDeserializer<M> moveDeserializer;

    protected AbstractProcessor(PlayerProvider<P> playerProvider) {
        this.playerProvider = playerProvider;
        this.moveDeserializer = createMoveDeserializer();
    }

    /**
     * The stopping condition for this game.
     * @param state The current state
     * @return True if the game is over, false otherwise
     */
    public abstract boolean hasGameEnded(S state);

    /**
     * Returns the winner playerId of the game
     * @return Null if there is no winner, a playerId otherwise
     */
    public abstract Integer getWinnerId(S state);

    /**
     * @return The current game score
     */
    public abstract double getScore(S state);

    /**
     * Create the move deserializer
     * @return A MoveDeserializer
     */
    public abstract AbstractMoveDeserializer createMoveDeserializer();

    public PlayerProvider<P> getPlayerProvider() {
        return this.playerProvider;
    }

    protected M getPlayerMove(P player, Enum actionType) {
        String response = player.requestMove(actionType);
        return this.moveDeserializer.traverse(response);
    }

    protected P getPlayer(int id) {
        return this.playerProvider.getPlayerById(id);
    }
}
